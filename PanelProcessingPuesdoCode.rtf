{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red45\green45\blue45;\red255\green255\blue255;\red32\green108\blue135;
\red157\green0\blue210;\red0\green0\blue109;\red45\green45\blue45;\red101\green76\blue29;\red157\green0\blue210;
\red0\green0\blue255;\red1\green5\blue10;\red63\green16\blue134;}
{\*\expandedcolortbl;;\cssrgb\c23137\c23137\c23137;\cssrgb\c100000\c100000\c100000;\cssrgb\c14902\c49804\c60000;
\cssrgb\c68627\c0\c85882;\cssrgb\c0\c6275\c50196;\cssrgb\c23137\c23137\c23137;\cssrgb\c47451\c36863\c14902;\cssrgb\c68627\c0\c85882;
\cssrgb\c0\c0\c100000;\cssrgb\c392\c1569\c3529;\cssrgb\c31765\c14510\c59608;}
\margl1440\margr1440\vieww20940\viewh16040\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 panel_matching\cb1 \
\cb3     \cb1 \
\cb3     make_template(template_cut_file) \cb1 \
		\cb3 This \cf4 \strokec4 function\cf2 \strokec2  will be used to label template scans \cf5 \strokec5 with\cf2 \strokec2  various panels,\cb1  \
		\cf5 \cb3 \strokec5 for\cf2 \strokec2  \cf6 \strokec6 the\cf2 \strokec2  purpose of automatically labeling future panels that are scanned.\cb1 \
		\
		\cb3 calls find_panel_data(template_cut_file)\cb1 \
	\
\
	match_new_cuts(template_dict, new_cut_dict)\
		This function will be used to automatically orient and \
		label the panels of a given new scan relative to the specified old scan.\
	\
	get_file_name(file path)\
		Extract and return the name of the input file without its extension\
\
	graph_all_panels(panels, filepaths)\
		Taking the collection of panel labels and data, graph each of them\
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 panel_sectioning\
Takes the point cloud data and cuts it up into sections, then it finds the centroids and normal vectors to those sections\cb1 \
\cb3     \cb1 \
\cb3     find panel data(STL File)\cb1 \
\
\cb3         planar outlier removal(mesh points)\cb1 \
\cb3             This removes the outliers\cb1 \
\
\cb3         get clusters(points)\cb1 \
\cb3             this uses k means to make the clusters\cb1 \
\
\cb3         plot clusters()\cb1 \
\cb3             just plots the points\cb1 \
\
\cb3         \cf8 format\cf7  cluster(label, points, centroids)\cb1 \
\cb3             turns the data into nice python dictionaries\cb1 \
\
\cb3     \cf9 return\cf7  cluster_data, the cluster data \cf10 is\cf7  python dictionaries \cf9 with\cf7  centroid \cf10 and\cf7  normal vector to each panel\
\
\
panel_labeling\
The purpose of this module is to provide an interface for manually assigning labels to panel arrays.\
It visualizes the existing names (in their respective positions), allowing the user to apply whatever\
naming convention they so choose to use for the panel arrays.\
\
	overwrite_labels(panel_data_dict, save_as=None)\
		This function takes an existing collection of nested dictionaries representing panel data\
		and uses a graphical interface to let the user reassign each panel's name. The new collection\
		is returned (and saved as a .json file if a full file path was passed as a parameter).\
\
	display_graph(coords, norms, highlight_point_index, size_key=None, text_key=None)\
		This function takes panel center and normal information, including the sizes of	points\
		and a point to be highlighted, and graphs them into a MatPlotLib plot, such that the\
		user can clearly see where any highlighted point is relative to all others.\
\
\
\pard\pardeftab720\partightenfactor0
\cf7 hinge_line_testing\
This was an exploratory attempt at using a .svg file whose lines traced\
the hinges of a flasher, where points included on the .svg file\
correspond to the panel selections for the auto-labeler, such that\
one could accurately evaluate rotation about hinges, rather than just\
the angular differences between the normal vectors of each panel.\cf7 \
\pard\pardeftab720\partightenfactor0
\cf7 \
\
panel_comparison\
This is basically step 4 from what Jake wrote on the whiteboard. \
Takes in JSON files and gives you angle between the normal vectors.\
\
	main\
	\
	graph_multiarray\
\
	\cf11 \uc0\u8206 \cf12 \cb1 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\uc0\u8232 \cf11 \cb3 	graph_multiscan_by_hinge\
		\cf11 \cb1 \uc0\u8232 \cf12 \uc0\u8232 \cf11 \cb3 	multi_scan_hinge_stats\
		This function will take a list of jsons and a key showing which pairs of panels represent\
		hinges, returning a standard deviation and list of absolute angles, in each axis, for each hinge\cf11 \cb1 \uc0\u8232 \
	\cf11 \cb3 single_scan_heatmap\
		plots a heat map of a single scan, I assume.\cf11 \cb1 \
\
	\cf11 \cb3 direct_compare_panels\
		Converting NumPy point clouds into skspatial planes with origins and normals\
		compares them\cf11 \cb1 \uc0\u8232 \
	\cf11 \cb3 transform_panels\cf11 \cb1 \uc0\u8232 \
	\cf11 \cb3 solve_positions\
		Has several different options for comparing two panels to each other,\
		returns different things depending on which option you pick.\
		\cf11 \cb1 \uc0\u8232 \
	\cf11 \cb3 c_to_proj\
		???\cf11 \cb1 \uc0\u8232 	\
	\cf11 \cb3 get_center_plane\
		useless?\cf11 \cb1 \uc0\u8232 \cf12 \uc0\u8232 \cf11 \cb3 	remove_outliers\
		useless??\cf11 \cb1 \uc0\u8232 \
	\cf11 \cb3 iter_best_fit_plane\
		\cf11 useless??\cf11 \cb1 \uc0\u8232 	\
	\cf11 \cb3 mesh_to_array\
		converts a mesh to a numpy array\
		good example of a utilities function\cf11 \cb1 \uc0\u8232 	\
	\cf11 \cb3 plot_circle\
		useless??\cf7 \
\
\
\
\
\
\
\
\
\
}